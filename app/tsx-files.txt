"use client";

import React from 'react';
import SoundCloudPlayer from '../components/SoundCloudPlayer';

const musicTracks = [
  {
    title: 'Sadness',
    soundCloudUrl: 'https://soundcloud.com/danis-ramirez-553323529/sadness',
  },
];

export default function MusicPage() {
  return (
    <div className="container mx-auto px-4 py-8 space-y-12">
      <div className="card bg-white dark:bg-dark-surface rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow duration-300 border border-gray-300 dark:border-gray-700">
        <h2 className="text-3xl font-bold mb-4">Music Composition</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-2 gap-6">
          {musicTracks.map((track, index) => (
            <div key={index} className="border border-gray-300 dark:border-gray-700 rounded-lg shadow-md p-4 hover:shadow-lg transition-shadow duration-300">
              <h3 className="text-2xl font-semibold mb-2">{track.title}</h3>
              <SoundCloudPlayer url={track.soundCloudUrl} />
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

"use client";

import React from 'react';
import ProjectCard from '../components/ProjectCard';

const projects = {
  'Mobile and web development': [
    {
      username: 'DanisAlfonso',
      repository: 'GymTracker',
      description: 'A comprehensive gym tracking app to monitor workouts, progress, and more.',
    },
    {
      username: 'DanisAlfonso',
      repository: 'NeoNotes',
      description: 'A modern flashcard and note-taking application with rich text editing and organization features.',
    },
    {
      username: 'DanisAlfonso',
      repository: 'Website',
      description: 'A web development project description.',
    },
  ],
  'C++': [
    {
      username: 'DanisAlfonso',
      repository: 'NumLib',
      description: 'NumLib is a C++ project aimed at providing a toolkit for numeric computation.',
    },
  ],
};

export default function ProjectsPage() {
  return (
    <div className="space-y-12 container mx-auto px-4 py-8">
      {Object.entries(projects).map(([category, projectList]) => (
        <section key={category} className="bg-white dark:bg-dark-surface rounded-lg shadow-md p-6 border border-gray-300 dark:border-gray-700">
          <h2 className="text-3xl font-bold mb-4">{category}</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {projectList.map((project, index) => (
              <ProjectCard
                key={index}
                username={project.username}
                repository={project.repository}
                description={project.description}
              />
            ))}
          </div>
        </section>
      ))}
    </div>
  );
}
"use client";

import React, { useState } from 'react';
import PhotoCard from '../components/PhotoCard';
import Modal from '../components/Modal';

const photoCategories = {
  "Nature": [
    { src: '/photos/MontR.jpg', alt: 'Photo 2', caption: 'The mountain' },
    { src: '/photos/Weinberg.jpg', alt: 'Photo 3', caption: 'On the way to the waterfall' },
    { src: '/photos/dorf.jpg', alt: 'Photo 4', caption: 'On the way to the waterfall' },
    { src: '/photos/sm.jpeg', alt: 'Photo 5', caption: 'It has rained in the village' },

  ],
  "Something Delicious to Eat or Drink": [
    { src: '/photos/cafe1.jpg', alt: 'Photo 4', caption: 'For my enjoyment' },
    { src: '/photos/cafe2.jpg', alt: 'Photo 4', caption: 'For my enjoyment' },
    { src: '/photos/miel.jpg', alt: 'Photo 5', caption: 'What a delight' },
    { src: '/photos/Torrejas.jpg', alt: 'Photo 6', caption: 'What a delight' },
    { src: '/photos/CafeT.jpg', alt: 'Photo 6', caption: 'Roasting coffee' },
    { src: '/photos/beer1.jpg', alt: 'Photo 7', caption: 'Beer in Bavaria' },
    { src: '/photos/beer2.jpg', alt: 'Photo 8', caption: 'Beer in Bavaria'},
    { src: '/photos/tortilla.jpg', alt: 'Photo 9', caption: 'I have prepared a Spanish omelette' },
    { src: '/photos/papas.jpg', alt: 'Photo 10', caption: 'I made myself some fries'},


  ],
          "Germany": [
    { src: '/photos/Mannheim.jpg', alt: 'Photo 1', caption: 'First city I visited in Germany, Mannheim' },
    { src: '/photos/Kaffee.jpg', alt: 'Photo 1', caption: 'Visiting a cafe on my first day in Germany' },
    { src: '/photos/winter1.jpg', alt: 'Photo 1', caption: 'Winter in Stolzenroth' },
    { src: '/photos/winter2.jpg', alt: 'Photo 2', caption: 'Winter in Stolzenroth' },
    { src: '/photos/winter3.jpg', alt: 'Photo 3', caption: 'Winter in Stolzenroth' },
    { src: '/photos/winter4.jpg', alt: 'Photo 4', caption: 'Winter in Stolzenroth' },
    { src: '/photos/winter5.jpg', alt: 'Photo 5', caption: 'Winter in Stolzenroth' },
    { src: '/photos/winter6.jpg', alt: 'Photo 6', caption: 'Winter in Stolzenroth' },
    { src: '/photos/winter7.jpg', alt: 'Photo 6', caption: 'Winter in Stolzenroth' },
    { src: '/photos/Stolzenroth.jpg', alt: 'Photo 6', caption: 'Spring in Stolzenroth' },
    { src: '/photos/Baum.jpeg', alt: 'Photo 6', caption: 'Spring in Stolzenroth' },

    { src: '/photos/car.jpg', alt: 'Photo 6', caption: 'While walking aimlessly through the streets of Bamberg' },
    { src: '/photos/car2.jpg', alt: 'Photo 6', caption: 'While walking aimlessly through the streets of Bamberg' },

  ],
        "Spain 2020": [
    { src: '/photos/B1.jpg', alt: 'Photo 1', caption: 'Montserrat' },
    { src: '/photos/B2.jpg', alt: 'Photo 2', caption: 'Montserrat' },
    { src: '/photos/B3.jpg', alt: 'Photo 3', caption: 'Montserrat' },
    { src: '/photos/B4.jpg', alt: 'Photo 4', caption: 'Montserrat' },
    { src: '/photos/B5.jpg', alt: 'Photo 5', caption: 'Montserrat' },
    { src: '/photos/B6.jpg', alt: 'Photo 6', caption: 'Montserrat' },
    { src: '/photos/B7.jpg', alt: 'Photo 7', caption: 'Montserrat' },
  ],

      "Hause Graden": [
    { src: '/photos/garden1.jpg', alt: 'Photo 1', caption: 'This is the garden of the house' },
    { src: '/photos/garden2.jpg', alt: 'Photo 2', caption: 'This is the garden of the house' },
    { src: '/photos/garden3.jpg', alt: 'Photo 3', caption: 'This is the garden of the house' },
    { src: '/photos/garden4.jpg', alt: 'Photo 4', caption: 'This is the garden of the house' },
    { src: '/photos/garden5.jpg', alt: 'Photo 5', caption: 'This is the garden of the house' },
    { src: '/photos/garden6.jpg', alt: 'Photo 6', caption: 'This is the garden of the house' },
    { src: '/photos/garden7.jpg', alt: 'Photo 7', caption: 'This is the garden of the house' },
    { src: '/photos/garden8.jpg', alt: 'Photo 8', caption: 'This is the garden of the house' },
    { src: '/photos/home.jpg', alt: 'Photo 8', caption: 'This is the garden of the house' },

    { src: '/photos/Casa Jardin 2.jpg', alt: 'Photo 1', caption: 'My second stone wall' },
    { src: '/photos/sol1.jpg', alt: 'Photo 8', caption: "The cat thinking about life's difficulties" },
    { src: '/photos/Gato.jpg', alt: 'Photo 8', caption: "The cat thinking about life's difficulties" },

  ],

        "Me in my Good Old Fitness Days": [
    { src: '/photos/fitness1.jpg', alt: 'Photo 1', caption: 'Me somewhere between 2015 and 2018' },
    { src: '/photos/fitness2.jpg', alt: 'Photo 2', caption: 'Me somewhere between 2015 and 2018' },
    { src: '/photos/fitness3.jpg', alt: 'Photo 3', caption: 'Me somewhere between 2015 and 2018' },
    { src: '/photos/fitness4.jpg', alt: 'Photo 4', caption: 'Me somewhere between 2015 and 2018' },
    { src: '/photos/hat.jpg', alt: 'Photo 5', caption: 'Me somewhere between 2015 and 2018' },
  ],

      "College Graduation": [
    { src: '/photos/U-FM.jpg', alt: 'Photo 1', caption: 'Graduation of the degree in physics at UNAH (2013)' },
    { src: '/photos/U-FS.jpg', alt: 'Photo 2', caption: 'Graduation of the degree in physics at UNAH (2013)' },
  ],
        "The Good Old Days": [
    { src: '/photos/cole.jpg', alt: 'Photo 1', caption: 'High school graduation (2007)' },
    { src: '/photos/coleMF.jpg', alt: 'Photo 2', caption: 'High school graduation (2007)' },
  ],



};

export default function PhotographyPage() {
  const [selectedPhotoIndex, setSelectedPhotoIndex] = useState<number | null>(null);
  const [currentPhotos, setCurrentPhotos] = useState<{ src: string; alt: string; caption: string }[]>([]);

  const handlePhotoClick = (index: number, category: string) => {
    setCurrentPhotos(photoCategories[category]);
    setSelectedPhotoIndex(index);
  };

  const closeModal = () => {
    setSelectedPhotoIndex(null);
  };

  return (
    <div className="container mx-auto px-4 py-8 space-y-12">
      {Object.entries(photoCategories).map(([category, photos]) => (
        <section key={category} className="bg-white dark:bg-dark-surface rounded-lg shadow-md p-6">
          <h2 className="text-3xl font-bold mb-4">{category}</h2>
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            {photos.map((photo, index) => (
              <PhotoCard
                key={index}
                src={photo.src}
                alt={photo.alt}
                caption={photo.caption}
                onClick={() => handlePhotoClick(index, category)}
              />
            ))}
          </div>
        </section>
      ))}
      {selectedPhotoIndex !== null && (
        <Modal
          isOpen={selectedPhotoIndex !== null}
          onClose={closeModal}
          photos={currentPhotos}
          currentIndex={selectedPhotoIndex}
          setCurrentIndex={setSelectedPhotoIndex}
        />
      )}
    </div>
  );
}

// app/blog/[id]/page.tsx
import { getBlogPost, getBlogPosts } from '../../lib/blog';
import { notFound } from 'next/navigation';

interface BlogPostPageProps {
  params: {
    id: string;
  };
}

export default function BlogPostPage({ params }: BlogPostPageProps) {
  const post = getBlogPost(params.id);

  if (!post) {
    notFound();
  }

  return (
    <div className="space-y-12">
      <section className="p-6 bg-white dark:bg-dark-surface border border-gray-300 dark:border-gray-700 rounded-lg shadow-md">
        <h2 className="text-3xl font-bold mb-2">{post.title}</h2>
        <p className="text-sm text-gray-500 dark:text-gray-400 mb-4">{post.date}</p>
        <div className="text-lg text-gray-700 dark:text-dark-text" dangerouslySetInnerHTML={{ __html: post.contentHtml }} />
      </section>
    </div>
  );
}

// app/blog/page.tsx
import BlogPost from '../components/BlogPost';
import { getBlogPosts } from '../lib/blog';

export default function BlogPage() {
  const blogPosts = getBlogPosts();

  return (
    <div className="container mx-auto px-4 py-8 space-y-12">
      <section className="p-6 bg-white dark:bg-dark-surface rounded-lg shadow-md">
        <h2 className="text-3xl font-bold mb-8">Blog</h2>
        <div className="space-y-6">
          {blogPosts.map((post, index) => (
            <BlogPost key={index} id={post.id} title={post.title} date={post.date} excerpt={post.excerpt} />
          ))}
        </div>
      </section>
    </div>
  );
}

// app/components/MusicalScore.tsx
import React from 'react';

interface MusicalScoreProps {
  src: string;
}

const MusicalScore: React.FC<MusicalScoreProps> = ({ src }) => {
  return (
    <div className="mt-4">
      <img src={src} alt="Musical Score" className="max-w-full h-auto rounded-lg shadow-md" />
    </div>
  );
};

export default MusicalScore;

// app/components/ProjectCard.tsx
"use client";

import React, { useState, useEffect } from 'react';

interface ProjectCardProps {
  username: string;
  repository: string;
  description: string;
}

interface Project {
  name: string;
  description: string;
  html_url: string;
}

const ProjectCard: React.FC<ProjectCardProps> = ({ username, repository, description }) => {
  const [project, setProject] = useState<Project | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchProject = async () => {
      try {
        const response = await fetch(`https://api.github.com/repos/${username}/${repository}`);
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();
        setProject(data);
      } catch (error) {
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchProject();
  }, [username, repository]);

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  if (!project) {
    return <div>No project found.</div>;
  }

  return (
    <div className="p-6 bg-white dark:bg-dark-surface border border-gray-300 dark:border-gray-700 rounded-lg shadow-md hover:border-primary dark:hover:border-primary transition-all duration-200 ease-in-out hover:shadow-lg dark:hover:shadow-lg dark:hover:shadow-[0_4px_6px_-1px_rgba(0,112,243,0.1),0_2px_4px_-1px_rgba(0,112,243,0.06)]">
      <h3 className="text-2xl font-semibold">
        <a href={project.html_url} target="_blank" rel="noopener noreferrer">
          {project.name}
        </a>
      </h3>
      <p>{description}</p>
    </div>
  );
};

export default ProjectCard;

// app/components/BlogPost.tsx
"use client";

import Link from 'next/link';

interface BlogPostProps {
  id: string;
  title: string;
  date: string;
  excerpt: string;
}

const BlogPost: React.FC<BlogPostProps> = ({ id, title, date, excerpt }) => {
  return (
    <div className="p-6 bg-white dark:bg-dark-surface border border-gray-300 dark:border-gray-700 rounded-lg shadow-md transition-transform transform hover:scale-105 hover:shadow-lg">
      <h3 className="text-2xl font-semibold mb-2">
        <Link href={`/blog/${id}`} className="text-primary hover:underline">
          {title}
        </Link>
      </h3>
      <p className="text-sm text-gray-500 dark:text-gray-400 mb-4">{date}</p>
      <p className="text-lg text-gray-700 dark:text-dark-text">{excerpt}</p>
    </div>
  );
};

export default BlogPost;

// app/components/PhotoCard.tsx
"use client";

interface PhotoCardProps {
  src: string;
  alt: string;
  caption: string;
  onClick: () => void;
}

const PhotoCard: React.FC<PhotoCardProps> = ({ src, alt, caption, onClick }) => {
  return (
    <div className="card p-2 cursor-pointer" onClick={onClick}>
      <div className="overflow-hidden">
        <img src={src} alt={alt} className="w-full h-64 object-cover transition-transform transform hover:scale-110" />
      </div>
      <div className="p-4">
        <p className="text-lg text-gray-700 dark:text-dark-text">{caption}</p>
      </div>
    </div>
  );
};

export default PhotoCard;

// app/components/SoundCloundPlayer.tsx
import React from 'react';

interface SoundCloudPlayerProps {
  url: string;
}

const SoundCloudPlayer: React.FC<SoundCloudPlayerProps> = ({ url }) => {
  return (
    <iframe
      width="100%"
      height="166"
      scrolling="no"
      frameBorder="no"
      allow="autoplay"
      src={`https://w.soundcloud.com/player/?url=${encodeURIComponent(url)}&color=%2300aabb&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true`}
    ></iframe>
  );
};

export default SoundCloudPlayer;
// app/components/Modal.tsx
import React from 'react';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  photos: { src: string; alt: string; caption: string }[];
  currentIndex: number;
  setCurrentIndex: (index: number) => void;
}

const Modal: React.FC<ModalProps> = ({ isOpen, onClose, photos, currentIndex, setCurrentIndex }) => {
  if (!isOpen) return null;

  const handleNext = () => {
    setCurrentIndex((currentIndex + 1) % photos.length);
  };

  const handlePrev = () => {
    setCurrentIndex((currentIndex - 1 + photos.length) % photos.length);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
      <div className="relative bg-white dark:bg-dark-surface p-4 rounded-lg shadow-lg max-w-3xl">
        <button
          onClick={onClose}
          className="absolute top-0 right-0 m-2 text-white dark:text-dark-text"
        >
          &times;
        </button>
        <div className="flex items-center justify-center space-x-4">
          <button
            onClick={handlePrev}
            className="text-white dark:text-dark-text bg-gray-600 dark:bg-gray-800 p-2 rounded-full"
          >
            &larr;
          </button>
          <img
            src={photos[currentIndex].src}
            alt={photos[currentIndex].alt}
            className="max-w-full max-h-[80vh] object-contain"
          />
          <button
            onClick={handleNext}
            className="text-white dark:text-dark-text bg-gray-600 dark:bg-gray-800 p-2 rounded-full"
          >
            &rarr;
          </button>
        </div>
        <p className="text-center mt-2 text-gray-700 dark:text-gray-300">{photos[currentIndex].caption}</p>
      </div>
    </div>
  );
};

export default Modal;

/* app/layout.tsx */
"use client";

import React, { useState, useEffect } from 'react';
import './globals.css';
import { Inter } from 'next/font/google';
import { SunIcon, MoonIcon } from '@heroicons/react/24/solid';
import { FaFacebook, FaTwitter, FaLinkedin, FaGithub } from 'react-icons/fa';
import Link from 'next/link';
import { usePathname } from 'next/navigation';

const inter = Inter({ subsets: ['latin'] });

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [theme, setTheme] = useState('light');
  const pathname = usePathname();

  useEffect(() => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
      setTheme(savedTheme);
    } else {
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      setTheme(prefersDark ? 'dark' : 'light');
    }
  }, []);

  useEffect(() => {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
    localStorage.setItem('theme', theme);
  }, [theme]);

  const toggleTheme = () => {
    setTheme((prevTheme) => (prevTheme === 'dark' ? 'light' : 'dark'));
  };

  return (
    <html lang="en" className={inter.className}>
      <body className="min-h-screen bg-gray-100 dark:bg-dark-background text-gray-900 dark:text-dark-text flex flex-col">
        <header className="fixed top-0 left-0 right-0 backdrop-blur-lg shadow-md z-50 bg-opacity-50 dark:bg-opacity-50 bg-white dark:bg-dark-surface border-b border-gray-200 dark:border-gray-700">
          <div className="container mx-auto px-4 py-4 flex items-center justify-between">
            <Link href="/" className="text-2xl font-bold">
              DNR
            </Link>
            <nav className="flex space-x-4 items-center">
              {[
                { name: 'Projects', href: '/projects' },
                { name: 'Music', href: '/music' },
                // { name: 'Architecture', href: '/architecture' },
                { name: 'Photography', href: '/photography' },
                { name: 'Blog', href: '/blog' },
              ].map((item) => (
                <Link
                  key={item.name}
                  href={item.href}
                  className={`text-lg font-medium hover:text-primary transition-colors ${pathname === item.href ? 'text-primary' : 'text-gray-700 dark:text-gray-300'
                    }`}
                >
                  {item.name}
                </Link>
              ))}
              <button
                onClick={toggleTheme}
                className="ml-4 p-2 bg-gray-200 dark:bg-gray-700 rounded-full transition-colors"
                title={`Toggle to ${theme === 'dark' ? 'light' : 'dark'} mode`}
              >
                {theme === 'dark' ? (
                  <SunIcon className="h-6 w-6 text-yellow-500" />
                ) : (
                  <MoonIcon className="h-6 w-6 text-blue-500" />
                )}
              </button>
            </nav>
          </div>
        </header>
        <main className="container mx-auto px-4 py-8 flex-grow mt-20 md:mt-24">
          {children}
        </main>
        <footer className="bg-gray-200 dark:bg-dark-surface py-8 mt-auto">
          <div className="container mx-auto px-4 flex flex-col md:flex-row justify-between items-center">
            <p className="text-center text-gray-700 dark:text-gray-300">© 2024 DNR. All rights reserved.</p>
            <div className="flex space-x-4 mt-4 md:mt-0">
              <a href="https://facebook.com" target="_blank" rel="noopener noreferrer" className="text-gray-700 dark:text-gray-300 hover:text-primary dark:hover:text-primary transition-colors">
                <FaFacebook className="h-6 w-6" />
              </a>
              <a href="https://twitter.com" target="_blank" rel="noopener noreferrer" className="text-gray-700 dark:text-gray-300 hover:text-primary dark:hover:text-primary transition-colors">
                <FaTwitter className="h-6 w-6" />
              </a>
              <a href="https://linkedin.com" target="_blank" rel="noopener noreferrer" className="text-gray-700 dark:text-gray-300 hover:text-primary dark:hover:text-primary transition-colors">
                <FaLinkedin className="h-6 w-6" />
              </a>
              <a href="https://github.com" target="_blank" rel="noopener noreferrer" className="text-gray-700 dark:text-gray-300 hover:text-primary dark:hover:text-primary transition-colors">
                <FaGithub className="h-6 w-6" />
              </a>
            </div>
          </div>
        </footer>
      </body>
    </html>
  );
}

"use client";

import React, { useState } from 'react';
import { FaGithub } from 'react-icons/fa';

const projects = [
  {
    title: 'Gym Tracker',
    description: 'A comprehensive gym tracking app to monitor workouts, progress, and more.',
    githubUrl: 'https://github.com/DanisAlfonso/gym_tracker',
  },
  {
    title: 'NeoNotes',
    description: 'A modern flashcard and note-taking application with rich text editing and organization features.',
    githubUrl: 'https://github.com/DanisAlfonso/NeoNotes',
  },
];

export default function HomePage({ currentSection }) {
  const [selectedProject, setSelectedProject] = useState(null);

  const handleProjectClick = (project) => {
    setSelectedProject(project);
  };

  const handleBackClick = () => {
    setSelectedProject(null);
  };

  return (
    <div className="space-y-12">
      {selectedProject ? (
        <section className="p-6 bg-white dark:bg-dark-surface rounded-lg shadow-md">
          <h2 className="text-3xl font-bold mb-4">{selectedProject.title}</h2>
          <p className="text-lg text-gray-700 dark:text-dark-text">{selectedProject.description}</p>
          <a href={selectedProject.githubUrl} target="_blank" rel="noopener noreferrer" className="text-blue-500 hover:underline mt-4 inline-block">
            <FaGithub className="mr-2 inline-block" />
            View on GitHub
          </a>
          <button onClick={handleBackClick} className="mt-4 p-2 bg-gray-300 dark:bg-dark-surface rounded hover:bg-gray-400 dark:hover:bg-gray-600">
            Back to Projects
          </button>
        </section>
      ) : (
        <>
          {currentSection === 'projects' && (
            <section className="p-6 bg-white dark:bg-dark-surface rounded-lg shadow-md">
              <h2 className="text-3xl font-bold mb-4">Software Development Projects</h2>
              <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 gap-6">
                {projects.map((project, index) => (
                  <div key={index} className="card p-4 border border-gray-300 dark:border-gray-700 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300 cursor-pointer" onClick={() => handleProjectClick(project)}>
                    <h3 className="text-2xl font-semibold mb-2">{project.title}</h3>
                    <p className="text-lg text-gray-700 dark:text-dark-text">{project.description}</p>
                    <a href={project.githubUrl} target="_blank" rel="noopener noreferrer" className="text-blue-500 hover:underline mt-4 inline-block">
                      <FaGithub className="mr-2 inline-block" />
                      View on GitHub
                    </a>
                  </div>
                ))}
              </div>
            </section>
          )}

          {currentSection === 'music' && (
            <section className="p-6 bg-white dark:bg-dark-surface rounded-lg shadow-md">
              <h2 className="text-3xl font-bold mb-4">Music Composition</h2>
              <p className="text-lg text-gray-700 dark:text-dark-text">Details about music compositions...</p>
            </section>
          )}

          {currentSection === 'architecture' && (
            <section className="p-6 bg-white dark:bg-dark-surface rounded-lg shadow-md">
              <h2 className="text-3xl font-bold mb-4">Architecture</h2>
              <p className="text-lg text-gray-700 dark:text-dark-text">Details about architecture projects...</p>
            </section>
          )}

          {currentSection === 'photography' && (
            <section className="p-6 bg-white dark:bg-dark-surface rounded-lg shadow-md">
              <h2 className="text-3xl font-bold mb-4">Photography</h2>
              <p className="text-lg text-gray-700 dark:text-dark-text">Details about photography...</p>
            </section>
          )}

          {currentSection === 'blog' && (
            <section className="p-6 bg-white dark:bg-dark-surface rounded-lg shadow-md">
              <h2 className="text-3xl font-bold mb-4">Blog</h2>
              <p className="text-lg text-gray-700 dark:text-dark-text">Latest blog posts...</p>
            </section>
          )}
        </>
      )}
    </div>
  );
}

